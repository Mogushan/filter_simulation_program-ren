function [x_est,P_matrix] = LC_KF_PROCESS(att, vel, pos, accel, x_est,...
          GNSS_measurements, INS_data, GNSS_config, P_matrix, ...
        LC_KF_config)
    
 % LC_KF_PROCESS - Implements one cycle of the loosely coupled INS/GNSS
 % Kalman filter plus closed-loop correction of all inertial states
 %
 % Created 17/03/17 by Ren 
 %
 % Inputs:
 %    angle
 %       .e           east 
 %       .n
 %       .u
 %    vel
 %       .e            east velocity
 %       .n            north velocity
 %       .u            up velocity
 %    pos
 %        .e            latitude
 %        .n            longitude
 %        .u            height
 %    accel

 
 %    GNSS_measurements
 
 %     GNSS_config
 
 %      P_matrix
 
 %       LC_KF_config
 
 
 % Outputs:
 %
 
 % Begins
 
 % Constants 
omega_ie = 7.292115e-5;  % Earth rotation rate in rad/s
R= 6378245; %WGS84 Equatorial radius in meters
ecc = 1/298.257; %WGS84 eccentricity
Rm = R*(1-2*ecc+3*ecc*sin(pos.e)^2);
Rn = R*(1-ecc*sin(pos.e)^2);
% Calculate C_b_n matrix
C_b_n = a2mat(att);

% SYSTEM PROPAGATION PHASE

% 1. Determine transition matrix
% Phi_matrix = eye(15);% 17/03/31
% Phi_matrix(1:3,1:3) = Phi_matrix(1:3,1:3) + LC_KF_config.epoch_interval*[0 omega_ie*sin(pos.e)+...
%     vel.e*tan(pos.e)/(Rn+pos.u) -(omega_ie*cos(pos.e)+vel.e/(Rn+pos.u));...
%     -(omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) 0 -vel.n/(Rm+pos.u);...
%     omega_ie*cos(pos.e)+vel.e/(Rn+pos.u) vel.n/(Rm+pos.u) 0];
% Phi_matrix(1:3,4:6) = LC_KF_config.epoch_interval*[0 -1/(Rm+pos.u) 0;...
%     1/(Rn+pos.u) 0 0;...
%     tan(pos.e)/(Rn+pos.u) 0 0];
% Phi_matrix(1:3,7:9) = LC_KF_config.epoch_interval*[0 0 0;...
%     -omega_ie*sin(pos.e) 0 0;...
%     omega_ie*cos(pos.e)+vel.e*(sec(pos.e))^2/(Rn+pos.u) 0 0];
% Phi_matrix(1:3,10:12) = C_b_n*LC_KF_config.epoch_interval;
% Phi_matrix(4:6,1:3) = LC_KF_config.epoch_interval*[0 -accel.u accel.n;...
%     accel.u 0 -accel.e;...
%     -accel.n accel.e 0];
% Phi_matrix(4:6,4:6) = Phi_matrix(4:6,4:6) + LC_KF_config.epoch_interval*[vel.n*tan(pos.e)/(Rm+pos.u)-...
%     vel.u/(Rm+pos.u) (2*omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) ...
%     -(2*omega_ie*cos(pos.e)+vel.e/(Rn+pos.u)); ...
%     -2*(omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) -vel.u/(Rm+pos.u) -vel.n/(Rm+pos.u);...
%     2*(omega_ie*cos(pos.e)+vel.e/(Rn+pos.u)) 2*vel.n/(Rm+pos.u) 0];
% Phi_matrix(4:6,7:9) = LC_KF_config.epoch_interval*[2*omega_ie*cos(pos.e)*vel.n+vel.e*vel.n*(sec(pos.e))^2/(Rn+pos.u)+...
%     2*omega_ie*sin(pos.e)*vel.u 0 0;...
%     -2*omega_ie*cos(pos.e)*vel.e-(vel.e^2)*(sec(pos.e))^2/(Rn+pos.u) 0 0;...
%     -2*omega_ie*vel.e*sin(pos.e) 0 0];
% Phi_matrix(4:6,13:15) = C_b_n*LC_KF_config.epoch_interval;
% Phi_matrix(7:9,4:6) = LC_KF_config.epoch_interval*[0 1/(Rm+pos.u) 0;...
%     sec(pos.e)/(Rn+pos.u) 0 0;...
%     0 0 1];
% Phi_matrix(7:9,7:9)=Phi_matrix(7:9,7:9) + LC_KF_config.epoch_interval*[0 0 0;...
%     vel.e*sec(pos.e)*tan(pos.e)/(Rn+pos.u) 0 0;...
%     0 0 0];


Ft = zeros(15);% 17/04/11
Ft(1:3,1:3) = [0 omega_ie*sin(pos.e)+...
    vel.e*tan(pos.e)/(Rn+pos.u) -(omega_ie*cos(pos.e)+vel.e/(Rn+pos.u));...
    -(omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) 0 -vel.n/(Rm+pos.u);...
    omega_ie*cos(pos.e)+vel.e/(Rn+pos.u) vel.n/(Rm+pos.u) 0];
Ft(1:3,4:6) = [0 -1/(Rm+pos.u) 0;...
    1/(Rn+pos.u) 0 0;...
    tan(pos.e)/(Rn+pos.u) 0 0];
Ft(1:3,7:9) = [0 0 vel.n/((Rm+pos.u)^2);...
    -omega_ie*sin(pos.e) 0 -vel.e/((Rn+pos.u)^2);...
    omega_ie*cos(pos.e)+vel.e*(sec(pos.e))^2/(Rn+pos.u) 0 -vel.e*tan(pos.e)/((Rn+pos.u)^2)];
Ft(1:3,10:12) = C_b_n;% positive, different from the previous
Ft(4:6,1:3) = [0 -accel.u accel.n;...
    accel.u 0 -accel.e;...
    -accel.n accel.e 0];
Ft(4:6,4:6) = [vel.n*tan(pos.e)/(Rm+pos.u)-...
    vel.u/(Rm+pos.u) (2*omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) ...
    -(2*omega_ie*cos(pos.e)+vel.e/(Rn+pos.u)); ...
    -2*(omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) -vel.u/(Rm+pos.u) -vel.n/(Rm+pos.u);...
    2*(omega_ie*cos(pos.e)+vel.e/(Rn+pos.u)) 2*vel.n/(Rm+pos.u) 0];
Ft(4:6,7:9) = [2*omega_ie*cos(pos.e)*vel.n+vel.e*vel.n*(sec(pos.e))^2/(Rn+pos.u)+...
    2*omega_ie*sin(pos.e)*vel.u 0 vel.e*vel.u/((Rn+pos.u)^2)-vel.e*vel.n*tan(pos.e)/((Rn+pos.u)^2);...
    -2*omega_ie*cos(pos.e)*vel.e-(vel.e^2)*(sec(pos.e))^2/(Rn+pos.u) 0 vel.n*vel.u/((Rm+pos.u)^2)+vel.e^2*tan(pos.e)/((Rn+pos.u)^2);...
    -2*omega_ie*vel.e*sin(pos.e) 0 vel.n^2/((Rm+pos.u)^2)+vel.e^2/((Rn+pos.u)^2)];
Ft(4:6,13:15) = C_b_n;
Ft(7:9,4:6) = [0 1/(Rm+pos.u) 0;...
    sec(pos.e)/(Rn+pos.u) 0 0;...
    0 0 1];
Ft(7:9,7:9)= [0 0 vel.n/((Rm+pos.u)^2);...
    vel.e*sec(pos.e)*tan(pos.e)/(Rn+pos.u) 0 vel.e*sec(pos.e)/((Rn+pos.u)^2);...
    0 0 0];
% Phi_matrix = expm(Ft*LC_KF_config.epoch_interval);
Fk = Ft*LC_KF_config.epoch_interval;
Phi_matrix = eye(size(Ft)) + Fk +0.5*Fk*Fk;

% Phi_matrix = zeros(15);% 17/04/10
% Ft = eye(15);
% Ft(1:3,1:3) = [0 omega_ie*sin(pos.e)+...
%     vel.e*tan(pos.e)/(Rn+pos.u) -(omega_ie*cos(pos.e)+vel.e/(Rn+pos.u));...
%     -(omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) 0 -vel.n/(Rm+pos.u);...
%     omega_ie*cos(pos.e)+vel.e/(Rn+pos.u) vel.n/(Rm+pos.u) 0];
% Ft(1:3,4:6) = [0 -1/(Rm+pos.u) 0;...
%     1/(Rn+pos.u) 0 0;...
%     tan(pos.e)/(Rn+pos.u) 0 0];
% Ft(1:3,7:9) = [0 0 0;...
%     -omega_ie*sin(pos.e) 0 0;...
%     omega_ie*cos(pos.e)+vel.e*(sec(pos.e))^2/(Rn+pos.u) 0 0];
% Ft(1:3,10:12) = C_b_n;% positive, different from the previous
% Ft(4:6,1:3) = [0 -accel.u accel.n;...
%     accel.u 0 -accel.e;...
%     -accel.n accel.e 0];
% Ft(4:6,4:6) = [vel.n*tan(pos.e)/(Rm+pos.u)-...
%     vel.u/(Rm+pos.u) (2*omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) ...
%     -(2*omega_ie*cos(pos.e)+vel.e/(Rn+pos.u)); ...
%     -2*(omega_ie*sin(pos.e)+vel.e*tan(pos.e)/(Rn+pos.u)) -vel.u/(Rm+pos.u) -vel.n/(Rm+pos.u);...
%     2*(omega_ie*cos(pos.e)+vel.e/(Rn+pos.u)) 2*vel.n/(Rm+pos.u) 0];
% Ft(4:6,7:9) = [2*omega_ie*cos(pos.e)*vel.n+vel.e*vel.n*(sec(pos.e))^2/(Rn+pos.u)+...
%     2*omega_ie*sin(pos.e)*vel.u 0 0;...
%     -2*omega_ie*cos(pos.e)*vel.e-(vel.e^2)*(sec(pos.e))^2/(Rn+pos.u) 0 0;...
%     -2*omega_ie*vel.e*sin(pos.e) 0 0];
% Ft(4:6,13:15) = C_b_n;
% Ft(7:9,4:6) = [0 1/(Rm+pos.u) 0;...
%     sec(pos.e)/(Rn+pos.u) 0 0;...
%     0 0 1];
% Ft(7:9,7:9)= [0 0 0;...
%     vel.e*sec(pos.e)*tan(pos.e)/(Rn+pos.u) 0 0;...
%     0 0 0];
% Phi_matrix = expm(Ft*LC_KF_config.epoch_interval);

%2.Determine approximate system noise covariance matrix
Q_prime_matrix = zeros(15);
% Q_prime_matrix(1:3,1:3) =...
% C_b_n*LC_KF_config.gyro_noise_PSD*C_b_n'*LC_KF_config.epoch_interval;%17/03/20
% Q_prime_matrix(4:6,4:6) =...
% C_b_n*LC_KF_config.accel_noise_PSD*C_b_n'*LC_KF_config.epoch_interval;%17/03/20
Q_prime_matrix(1:3,1:3) = LC_KF_config.gyro_noise_PSD*LC_KF_config.epoch_interval;%17/04/10 
Q_prime_matrix(4:6,4:6) = LC_KF_config.accel_noise_PSD*LC_KF_config.epoch_interval;%17/04/10
% Q_prime_matrix(10:12,10:12) =
% LC_KF_config.gyro_bias_PSD*LC_KF_config.epoch_interval;%17/04/05
% Q_prime_matrix(13:15,13:15) =
% LC_KF_config.accel_bias_PSD*LC_KF_config.epoch_interval;%17/04/05

%3.Propogate state estimates 
x_est_propogated = Phi_matrix*x_est;
%4. Propogate state estimation error covariance matrix
P_matrix_propogated = Phi_matrix*(P_matrix+0.5*Q_prime_matrix)*...
    Phi_matrix'+0.5*Q_prime_matrix;%17/03/31    
% P_matrix_propogated = Phi_matrix*P_matrix*Phi_matrix' +...
% Q_prime_matrix;%17/04/10

%5. Measurement matrix
H_matrix = zeros(6,15);
H_matrix(1:6,4:9) = eye(6);

%6. Measurement error covaraiance matrix
R_matrix = GNSS_config.noise_root_PSD;

%7.Calculate Kalman gain
K_matrix = P_matrix_propogated*H_matrix'/(H_matrix*P_matrix_propogated*H_matrix' + R_matrix);

%8.Update state estimates
dz = INS_data(4:9)' - GNSS_measurements;
x_est = x_est_propogated + K_matrix*(dz - H_matrix*x_est_propogated);

%9.Update state estimation error covariance
P_matrix = (eye(15)-K_matrix*H_matrix)*P_matrix_propogated;

